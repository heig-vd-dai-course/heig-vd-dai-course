@startuml udp-unicast-server-client-workflow
skinparam boxPadding 100
skinparam maxMessageSize 300
skinparam noteTextAlignment center
skinparam sequenceMessageAlign direction
skinparam wrapWidth 250
autonumber

!pragma teoz true

title "UDP - Unicast (server/client) workflow"

participant "UDP Client\n(192.168.1.23)" as client
participant "UDP Server\n(192.168.1.25)" as server

server -> server : **Create** a socket\n(class ""DatagramSocket"")

server -> server : **Bind** the socket to a port (e.g. 4445)\n(method ""socket.bind(4445)"")

client -> client : **Create** a socket\n(class ""DatagramSocket"")

client -> client : **Get/transform** the data to send as an array of bytes\n(method depending on the type of data)

client -> client : **Create** a datagram packet using the server's IP\n(class ""DatagramPacket"")

note over client, server
  At this point, the datagram packet does not need to wait/confirm that the server is online/accessible.

  The datagram packet has all the required information needed in its header and the client can send it through the socket whenever they want.
endnote


loop Server waits for datagram packets
    server -> server : **Wait to receive** a datagram packet on the given socket\n(method ""socket.receive()"")

    note over client, server
      At this point, the socket will wait for a datagram to arrive on the given port.
    endnote

    ...

    client -> server : **Send** the datagram on the network\n(method ""socket.send(packet)"")

    note over client, server
      At any time, the client can decide to send the datagram packet.
      
      The datagram packet will be forwarded to the server using the information contained in the datagram header (server's IP, sender's IP, etc.).
    endnote

    client -> server : **Close** the connection\n(method ""socket.close()"")

    note over client, server
      As the client does not need to wait/acknowledge that the server has received the datagram packet successfully, it can close the connection immediately
    endnote

    server -> server : **Receive** the datagram packet\n(method ""socket.receive()"")

    server -> server : **Get/transform** the datagram packet payload\n(method depending on the type of data)
end

server -> server : **Close** the connection
@enduml
