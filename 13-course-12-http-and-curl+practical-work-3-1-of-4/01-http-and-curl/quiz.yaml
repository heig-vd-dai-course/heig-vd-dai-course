---
name: HTTP and curl quiz
description: This is a quiz about HTTP and curl.
tags:
  - http
  - curl
questions:
  - title: HTTP response status codes categorization
    statement: |
      In the following possible answers, which one is **not** a valid HTTP response status code category?
    possibleAnswers:
      - Informational responses
      - Successful responses
      - Redirection messages
      - Network error responses
      - Client error responses
      - Server error responses
    correctAnswer:
      index: 3
      explanation: |
        The possible answers are the following:

        - Informational responses (100-199)
        - Successful responses (200-299)
        - Redirection messages (300-399)
        - Client error responses (400-499)
        - Server error responses (500-599)

        The network error responses are not a valid HTTP response status code category.

        The network error responses are usually generated by the client or the server when a network error occurs.
  - title: HTTP methods - true or false?
    statement: |
      A `PUT` request is used to create a resource on the server.
    possibleAnswers:
      - "True"
      - "False"
    correctAnswer:
      index: 0
      explanation: |
        The `PUT` request is used to create a resource on the server if the resource does not exist, or to update the resource if it already exists.

        The `PUT` method is considered idempotent, which means that multiple identical requests should have the same effect as a single request.
  - title: HTTP methods - true or false?
    statement: |
      A `POST` request should return a `200 OK` response status code if the resource was created on the server.
    possibleAnswers:
      - "True"
      - "False"
    correctAnswer:
      index: 1
      explanation: |
        While totally acceptable, the `200 OK` response status code is not recommended. The `201 Created` response status code is recommended instead as it is more explicit.
  - title: HTTP methods - true or false?
    statement: |
      A `DELETE` request should return a `200 OK` response status code if the resource was deleted on the server.
    possibleAnswers:
      - "True"
      - "False"
    correctAnswer:
      index: 1
      explanation: |
        While totally acceptable, the `200 OK` response status code is not recommended. The `204 No Content` response status code is recommended instead as it is more explicit as no content is returned.
  - title: HTTP session
    statement: |
      Why is HTTP considered a stateless protocol?
    possibleAnswers:
      - Because the server does not store any information about the client.
      - Because the server does not store any information about the client between requests.
      - Because the server does not store any information about the client between sessions.
    correctAnswer:
      index: 1
      explanation: |
        HTTP is considered a stateless protocol because the server does not store any information about the client between requests.

        The server can store information about the client between requests using cookies (recommended) or URL parameters (not recommended).
  - title: HTTP raw request
    statement: |
      You must send a `GET` request to the following URL: `https://example.com/api/v1/users/1234`.

      The endpoint returns JSON data.

      What is the right raw HTTP request?

      1.

      ```text 
      GET /api/v1/users/1234 HTTP/1.1
      Host: www.example.com
      Accept: application/json
      ```
  
      2.

      ```text
      GET /api/v1/users/1234 HTTP/1.1
      Host: www.example.com
      Accept: application/json

      ```

      3.

      ```text
      GET www.example.com/api/v1/users/1234 HTTP/1.1
      Accept: application/json
      ```
    possibleAnswers:
      - "1"
      - "2"
      - "3"
    correctAnswer:
      index: 1
      explanation: |
        The correct raw HTTP request is the following:

        ```text
        GET /api/v1/users/1234 HTTP/1.1
        Host: www.example.com
        Accept: application/json

        ```

        The `Host` header will be used to determine the server to which the request is sent.

        The `Accept` header will be used to determine the format of the response.

        The empty line at the end of the request is mandatory.
