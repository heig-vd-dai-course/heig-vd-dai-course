@startuml functional-example

title "Functional example"

participant "Emitter 1" as e1
participant "Emitter 2" as e2
participant "Server" as s
participant "Operator" as o

== Emit temperature ==

note over e1, s
An emitter emits
its temperature
periodically.
end note

e1 --> e1: <&clock> ... <&clock> ... <&clock> ...
e1 -[#red]> s: TEMP Kitchen 21.2
s -> s: Store the room's temperature

...

e2 --> e2: <&clock> ... <&clock> ... <&clock> ...
e2 -[#red]> s: TEMP Bedroom 18.4
s -> s: Store the room's temperature

...

== Request temperature ==

note over s, o
An operator can
request a room's
temperature at
any time.
end note

o -[#blue]> s: REQ_TEMP Bedroom
s -[#blue]> o: TEMP 18.4

legend
**Legend**

Types of communication and patterns used in the application.

| **Color** | **Type**  | **Pattern**      |
| <#red>    | Multicast | Fire and forget  |
| <#blue>   | Unicast   | Request-response |
endlegend

@enduml
